///$tab Main
SET ThousandSep=',';
SET DecimalSep='.';
SET MoneyThousandSep=',';
SET MoneyDecimalSep='.';
SET MoneyFormat='$#,##0.00;($#,##0.00)';
SET TimeFormat='h:mm:ss TT';
SET DateFormat='M/D/YYYY';
SET TimestampFormat='M/D/YYYY h:mm:ss[.fff] TT';
SET FirstWeekDay=6;
SET BrokenWeeks=1;
SET ReferenceDay=0;
SET FirstMonthOfYear=1;
SET CollationLocale='en-US';
SET MonthNames='Jan;Feb;Mar;Apr;May;Jun;Jul;Aug;Sep;Oct;Nov;Dec';
SET LongMonthNames='January;February;March;April;May;June;July;August;September;October;November;December';
SET DayNames='Mon;Tue;Wed;Thu;Fri;Sat;Sun';
SET LongDayNames='Monday;Tuesday;Wednesday;Thursday;Friday;Saturday;Sunday';
///$tab Main 2
/*
"User Defined Function" may be created in QV in two ways.

The first method is to define the function body in a QV variable.
The function body is a single QV expression and may include parameters.
The function is called in the script using the dollar-sign expression syntax.
Functions defined this way may be called from both script and chart expressions.
See "Dollar-Sign Expansions" in the QV Ref Guide for more information.

The second method is to define the function in the Marco module.  
The function definition and body are VBScript statements and may be
any VBS statements or functions allowed in QV marcos.  Functions defined this
way only be called from script.  This example does not demonstrate the macro method. 
For a macro example, see the QV Cookbook example "Regular Expression pattern matching function".

I have a complex expression. For neatness and reusablity, I'll define the expression in a QV variable.
named "calculateDiscountedPrice". Note that my definition contains references. $1 is the first
parameter, $2 is the second, and so on.
The funciton expects a Price($1) and a Customer($2).
Comments may be included in the function definition. They will not be stored in the variable.
*/

SET calculateDiscountedPrice =
if($1 > 100, $1*0.75,
	if($2 = 'A', $1*0.90,
		if($2 = 'B', $1*0.95,
			$1)		
))
;

/*
I'll use the function in my LOAD statement to calculate the DiscountedPrice field.
Using the $() syntax causes the expression to be evaluated, much as the "=" does in a chart expression.
*/

Sales:
LOAD *
		,$(calculateDiscountedPrice(Price, Customer)) as DiscountedPrice
;
LOAD *
Inline
[
Customer, Price
A, 9.50
A, 10.0
B, 11.0
B, 12.0
C, 13.10
D, 120.0
]
;